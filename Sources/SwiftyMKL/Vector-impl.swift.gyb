import Foundation
import BaseMath
import CIPL

%{
import sys; sys.path.append('../..');
from funcs import *
all_lines = cblas_lines+vml_lines+ipps_lines+rng_lines
all_h = [MklHeader(o) for o in all_lines]
}%

extension Vector {
% for h in all_h:
  ${h.impl_all_inst()}
% end

  @inlinable public func asum()->Element { return asum(1) }
  @inlinable public func nrm2()->Element { return nrm2(1) }
  @inlinable public func dot(_ b:Self)->Element { return dot(1, b, 1) }
  @inlinable public func set(_ b: Element) { set(b,self) }
  @inlinable public func zero() { zero(self) }
  @inlinable public func move(_ b:Self, _ n:Int) { Element.move(p, b.p, n) }
  @inlinable public func move(_ b:Self, _ n:Int, fromIdx:Int, toIdx:Int) { Element.move(p+fromIdx, b.p+toIdx, n) }

  % for o in map(lower1,vml1):
  @inlinable public func ${o}_() { ${o}(self) }
  @inlinable public func ${o}() -> Self  { return new_call(${o}) }
  % end # vml1

  % for o in map(lower1,vml2):
  @inlinable public func ${o}_(_ b:Self) { ${o}(b, self) }
  @inlinable public func ${o}(_ b:Self)->Self { return new_call(${o}, b) }
  % end # vml2

  @inlinable func ipp_reduce(_ f:(Self)->())->Element { let res = Self.init(1); f(res); return res[0] }

  % for o in map(lower1,ipp1):
  @inlinable public func ${o}()->Element { return ipp_reduce(${o}) }
  % end # ipp1

  % for o in map(lower1,ipp3):
  @inlinable public func ${o}(_ b:Self)->Element {return ipp_reduce({${o}(b, $0)})}
  % end # ipp3

  @inlinable public func powx_(_ b:Element) { powx(b, self) }
  @inlinable public func powx(_ b:Element)->Self { return new_call(powx, b) }

  @inlinable public func packIncrement(_ incr:Int, _ from:Int, _ n:Int, _ dest:Self) { Element.packI(n, p+from, incr, dest.p) }
  @inlinable public func packIncrement(_ incr:Int, _ from:Int, _ n:Int)->Self {
    let res = new(n); packIncrement(incr, from, n, res); return res
  }
  @inlinable public func packIndices(_ idxs:[Int32], _ dest:Self) { Element.packV(idxs.count, p, idxs, dest.p) }
  @inlinable public func packMasked( _ mask:[Int32], _ dest:Self) { Element.packM(mask.count, p, mask, dest.p) }
  @inlinable public func packIndices(_ idxs:[Int32])->Self { return new_call(packIndices, idxs, n:idxs.count) }
  @inlinable public func packMasked( _ mask:[Int32])->Self { return new_call(packMasked,  mask, n:Int(mask.reduce(0,+))) }
}

