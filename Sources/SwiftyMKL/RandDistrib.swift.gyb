import CMKL

// #defines from mkl_vsl_defines.h not auto-converted by swift
let VSL_BRNG_INC = 1<<VSL_BRNG_SHIFT
let VSL_BRNG_MCG31        = VSL_BRNG_INC
let VSL_BRNG_R250         = VSL_BRNG_MCG31 + VSL_BRNG_INC
let VSL_BRNG_MRG32K3A     = VSL_BRNG_R250 + VSL_BRNG_INC
let VSL_BRNG_MCG59        = VSL_BRNG_MRG32K3A + VSL_BRNG_INC
let VSL_BRNG_WH           = VSL_BRNG_MCG59 + VSL_BRNG_INC
let VSL_BRNG_SOBOL        = VSL_BRNG_WH + VSL_BRNG_INC
let VSL_BRNG_NIEDERR      = VSL_BRNG_SOBOL + VSL_BRNG_INC
let VSL_BRNG_MT19937      = VSL_BRNG_NIEDERR + VSL_BRNG_INC
let VSL_BRNG_MT2203       = VSL_BRNG_MT19937 + VSL_BRNG_INC
let VSL_BRNG_IABSTRACT    = VSL_BRNG_MT2203 + VSL_BRNG_INC
let VSL_BRNG_DABSTRACT    = VSL_BRNG_IABSTRACT + VSL_BRNG_INC
let VSL_BRNG_SABSTRACT    = VSL_BRNG_DABSTRACT + VSL_BRNG_INC
let VSL_BRNG_SFMT19937    = VSL_BRNG_SABSTRACT + VSL_BRNG_INC
let VSL_BRNG_NONDETERM    = VSL_BRNG_SFMT19937 + VSL_BRNG_INC
let VSL_BRNG_ARS5         = VSL_BRNG_NONDETERM + VSL_BRNG_INC
let VSL_BRNG_PHILOX4X32X10 = VSL_BRNG_ARS5 + VSL_BRNG_INC

public class RandDistribStream {
  var p:Optional<VSLStreamStatePtr>
  public init() { vslNewStream(&p, 0, UInt32.random(in: 0..<UInt32.max)) }
  deinit { vslDeleteStream(&p) }
}

%{
types = ('Float', 'Double')
rng_defs = [
  "Gaussian VSL_RNG_METHOD_GAUSSIANMV_ICDF",
  "Uniform VSL_RNG_METHOD_UNIFORM_STD",
  "Exponential VSL_RNG_METHOD_EXPONENTIAL_ICDF",
  "Laplace VSL_RNG_METHOD_LAPLACE_ICDF",
  "Cauchy VSL_RNG_METHOD_CAUCHY_ICDF",
  "Rayleigh VSL_RNG_METHOD_RAYLEIGH_ICDF",
  "Gumbel VSL_RNG_METHOD_GUMBEL_ICDF"
]
rng_defs = [o.split() for o in rng_defs]
def lower1(s): return s[:1].lower() + s[1:]
rng_defs = [(lower1(name), name, method) for name,method in rng_defs]

ri1 = [
  ('Uniform', 'VSL_RNG_METHOD_UNIFORM_STD', 'lowerinc', 'Int32', 'upperexc', 'Int32'),
  ('Binomial', 'VSL_RNG_METHOD_BINOMIAL_BTPE', 'ntrial',  'Int32','p', 'Double'),
  ('NegBinomial', 'VSL_RNG_METHOD_NEGBINOMIAL_NBAR', 'a', 'Double', 'p', 'Double')
]
ri2 = [
  ('Bernoulli', 'VSL_RNG_METHOD_BERNOULLI_ICDF', 'p'),
  ('Geometric', 'VSL_RNG_METHOD_GEOMETRIC_ICDF', 'p'),
  ('Poisson', 'VSL_RNG_METHOD_POISSON_PTPE', 'lambda')
]
}%

struct RandDistrib {
  var stream = RandDistribStream()

% for t,l in zip(types, 'sd'):
  % for lname,name,method in rng_defs:
  public func ${lname}(_ dest:VectorP<${t}>, _ a: ${t}, _ b: ${t}) {
    v${l}Rng${name}(${method}, stream.p, dest.c, dest.p, a, b)
  }
  public func ${lname}(_ n:Int, _ a: ${t}, _ b: ${t})->VectorP<${t}> {
    let dest = VectorP<${t}>(n)
    ${lname}(dest, a, b)
    return dest
  }
  % end

  public func gaussianMulti(_ dest:VectorP<${t}>, _ means:Array<${t}>, _ stdevs:Array<${t}>) {
    v${l}RngGaussianMV(VSL_RNG_METHOD_GAUSSIAN_ICDF, stream.p, numericCast(dest.count/means.count),
      dest.p, numericCast(means.count), VSL_MATRIX_STORAGE_DIAGONAL, means, stdevs);
  }
  public func gaussianMulti(_ n:Int, _ means:Array<${t}>, _ stdevs:Array<${t}>)->VectorP<${t}> {
    let dest = VectorP<${t}>(n * means.count)
    gaussianMulti(dest, means, stdevs)
    return dest
  }
% end # t,l

% for n,m,a,t1,b,t2 in ri1:
  public func ${lower1(n)}(_ dest: inout Array<Int32>, _ ${a}:${t1}, _ ${b}:${t2}) {
    viRng${n}(${m}, stream.p, numericCast(dest.count), &dest, ${a}, ${b})
  }
  public func ${lower1(n)}(_ n:Int, _ ${a}:${t1}, _ ${b}:${t2})->Array<Int32> {
    var res = Array<Int32>(repeating:0, count:n)
    ${lower1(n)}(&res, ${a}, ${b})
    return res
  }
% end

% for n,m,a in ri2:
  public func ${lower1(n)}(_ dest: inout Array<Int32>, _ ${a}:Double) {
    viRng${n}(${m}, stream.p, numericCast(dest.count), &dest, ${a})
  }
  public func ${lower1(n)}(_ n:Int, _ ${a}:Double)->Array<Int32> {
    var res = Array<Int32>(repeating:0, count:n)
    ${lower1(n)}(&res, ${a})
    return res
  }
% end
}

