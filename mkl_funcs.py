### AUTO-GENERATED BY get_headers.py ###

cblas_lines=['float  cblas_sdot(const MKL_INT N, const float  *X, const MKL_INT incX, const float  *Y, const MKL_INT incY);', 'float  cblas_sdoti(const MKL_INT N, const float *X, const MKL_INT *indx, const float *Y);', 'float  cblas_snrm2(const MKL_INT N, const float *X, const MKL_INT incX);', 'float  cblas_sasum(const MKL_INT N, const float *X, const MKL_INT incX);', 'void cblas_sswap(const MKL_INT N, float *X, const MKL_INT incX, float *Y, const MKL_INT incY);', 'void cblas_scopy(const MKL_INT N, const float *X, const MKL_INT incX, float *Y, const MKL_INT incY);', 'void cblas_saxpy(const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, float *Y, const MKL_INT incY);', 'void cblas_saxpby(const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_saxpyi(const MKL_INT N, const float alpha, const float *X, const MKL_INT *indx, float *Y);', 'void cblas_sgthr(const MKL_INT N, const float *Y, float *X, const MKL_INT *indx);', 'void cblas_sgthrz(const MKL_INT N, float *Y, float *X, const MKL_INT *indx);', 'void cblas_ssctr(const MKL_INT N, const float *X, const MKL_INT *indx, float *Y);', 'void cblas_srotg(float *a, float *b, float *c, float *s);', 'void cblas_srotmg(float *d1, float *d2, float *b1, const float b2, float *P);', 'void cblas_srot(const MKL_INT N, float *X, const MKL_INT incX, float *Y, const MKL_INT incY, const float c, const float s);', 'void cblas_sroti(const MKL_INT N, float *X, const MKL_INT *indx, float *Y, const float c, const float s);', 'void cblas_srotm(const MKL_INT N, float *X, const MKL_INT incX, float *Y, const MKL_INT incY, const float *P);', 'void cblas_sscal(const MKL_INT N, const float alpha, float *X, const MKL_INT incX);', 'void cblas_sgemv(const  CBLAS_LAYOUT Layout, const  CBLAS_TRANSPOSE TransA, const MKL_INT M, const MKL_INT N, const float alpha, const float *A, const MKL_INT lda, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_sgbmv(const  CBLAS_LAYOUT Layout, const  CBLAS_TRANSPOSE TransA, const MKL_INT M, const MKL_INT N, const MKL_INT KL, const MKL_INT KU, const float alpha, const float *A, const MKL_INT lda, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_strmv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const float *A, const MKL_INT lda, float *X, const MKL_INT incX);', 'void cblas_stbmv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const MKL_INT K, const float *A, const MKL_INT lda, float *X, const MKL_INT incX);', 'void cblas_stpmv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const float *Ap, float *X, const MKL_INT incX);', 'void cblas_strsv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const float *A, const MKL_INT lda, float *X, const MKL_INT incX);', 'void cblas_stbsv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const MKL_INT K, const float *A, const MKL_INT lda, float *X, const MKL_INT incX);', 'void cblas_stpsv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT N, const float *Ap, float *X, const MKL_INT incX);', 'void cblas_ssymv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *A, const MKL_INT lda, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_ssbmv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const MKL_INT K, const float alpha, const float *A, const MKL_INT lda, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_sspmv(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *Ap, const float *X, const MKL_INT incX, const float beta, float *Y, const MKL_INT incY);', 'void cblas_sger(const  CBLAS_LAYOUT Layout, const MKL_INT M, const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, const float *Y, const MKL_INT incY, float *A, const MKL_INT lda);', 'void cblas_ssyr(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, float *A, const MKL_INT lda);', 'void cblas_sspr(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, float *Ap);', 'void cblas_ssyr2(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, const float *Y, const MKL_INT incY, float *A, const MKL_INT lda);', 'void cblas_sspr2(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const MKL_INT N, const float alpha, const float *X, const MKL_INT incX, const float *Y, const MKL_INT incY, float *A);', 'void cblas_sgemm(const  CBLAS_LAYOUT Layout, const  CBLAS_TRANSPOSE TransA, const  CBLAS_TRANSPOSE TransB, const MKL_INT M, const MKL_INT N, const MKL_INT K, const float alpha, const float *A, const MKL_INT lda, const float *B, const MKL_INT ldb, const float beta, float *C, const MKL_INT ldc);', 'void cblas_sgemmt(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_TRANSPOSE TransB, const MKL_INT N, const MKL_INT K, const float alpha, const float *A, const MKL_INT lda, const float *B, const MKL_INT ldb, const float beta, float *C, const MKL_INT ldc);', 'void cblas_ssymm(const  CBLAS_LAYOUT Layout, const  CBLAS_SIDE Side, const  CBLAS_UPLO Uplo, const MKL_INT M, const MKL_INT N, const float alpha, const float *A, const MKL_INT lda, const float *B, const MKL_INT ldb, const float beta, float *C, const MKL_INT ldc);', 'void cblas_ssyrk(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE Trans, const MKL_INT N, const MKL_INT K, const float alpha, const float *A, const MKL_INT lda, const float beta, float *C, const MKL_INT ldc);', 'void cblas_ssyr2k(const  CBLAS_LAYOUT Layout, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE Trans, const MKL_INT N, const MKL_INT K, const float alpha, const float *A, const MKL_INT lda, const float *B, const MKL_INT ldb, const float beta, float *C, const MKL_INT ldc);', 'void cblas_strmm(const  CBLAS_LAYOUT Layout, const  CBLAS_SIDE Side, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT M, const MKL_INT N, const float alpha, const float *A, const MKL_INT lda, float *B, const MKL_INT ldb);', 'void cblas_strsm(const  CBLAS_LAYOUT Layout, const  CBLAS_SIDE Side, const  CBLAS_UPLO Uplo, const  CBLAS_TRANSPOSE TransA, const  CBLAS_DIAG Diag, const MKL_INT M, const MKL_INT N, const float alpha, const float *A, const MKL_INT lda, float *B, const MKL_INT ldb);', 'MKL_INT cblas_sgemm_pack_get_size(const  CBLAS_IDENTIFIER identifier, const MKL_INT M, const MKL_INT N, const MKL_INT K);', 'void cblas_sgemm_pack(const  CBLAS_LAYOUT Layout, const  CBLAS_IDENTIFIER identifier, const  CBLAS_TRANSPOSE Trans, const MKL_INT M, const MKL_INT N, const MKL_INT K, const float alpha, const float *src, const MKL_INT ld, float *dest);', 'void cblas_sgemm_compute(const  CBLAS_LAYOUT Layout, const MKL_INT TransA, const MKL_INT TransB, const MKL_INT M, const MKL_INT N, const MKL_INT K, const float *A, const MKL_INT lda, const float *B, const MKL_INT ldb, const float beta, float *C, const MKL_INT ldc);', 'void cblas_sgemm_free(float *dest);']
vml_lines=['_Mkl_Api(void,vsAbs,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAdd,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsSub,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsInv,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsSqrt,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsInvSqrt,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsCbrt,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsInvCbrt,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsSqr,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsExp,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsExp2, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsExp10, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void,vsExpm1,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsLn,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsLog2, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void,vsLog10,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsLog1p,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsLogb, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void,vsCos,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsSin,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsTan,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsCospi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsSinpi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsTanpi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsCosd, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsSind, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsTand, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void,vsCosh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsSinh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsTanh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAcos,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAsin,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAtan,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsAcospi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsAsinpi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void, vsAtanpi, (const MKL_INT n, const float  a[], float  r[]))', '_Mkl_Api(void,vsAcosh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAsinh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAtanh,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsErf,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsErfInv,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsHypot,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsErfc,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsErfcInv,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsCdfNorm,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsCdfNormInv,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsLGamma,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsTGamma,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsAtan2,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void, vsAtan2pi, (const MKL_INT n, const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsMul,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsDiv,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsPow,(const MKL_INT n,  const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsPow3o2,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsPow2o3,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsPowx,(const MKL_INT n,  const float  a[], const float   b, float  r[]))', '_Mkl_Api(void, vsPowr, (const MKL_INT n, const float  a[], const float  b[], float  r[]))', '_Mkl_Api(void,vsSinCos,(const MKL_INT n,  const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void,vsLinearFrac,(const MKL_INT n,  const float  a[], const float  b[], const float  scalea, const float  shifta, const float  scaleb, const float  shiftb, float  r[]))', '_Mkl_Api(void,vsCeil,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsFloor,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsFrac,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsModf,(const MKL_INT n,  const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsFmod, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsRemainder, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsNextAfter, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsCopySign, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsFdim, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsFmax, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsFmin, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsMaxMag, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void, vsMinMag, (const MKL_INT n, const float  a[], float  r1[], float  r2[]))', '_Mkl_Api(void,vsNearbyInt,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsRint,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsRound,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsTrunc,(const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void, vsExpInt1, (const MKL_INT n,  const float  a[], float  r[]))', '_Mkl_Api(void,vsPackI,(const MKL_INT n,  const float  a[], const MKL_INT   incra, float  y[]))', '_Mkl_Api(void,vsPackV,(const MKL_INT n,  const float  a[], const MKL_INT ia[], float  y[]))', '_Mkl_Api(void,vsPackM,(const MKL_INT n,  const float  a[], const MKL_INT ma[], float  y[]))', '_Mkl_Api(void,vsUnpackI,(const MKL_INT n,  const float  a[], float  y[], const MKL_INT incry  ))', '_Mkl_Api(void,vsUnpackV,(const MKL_INT n,  const float  a[], float  y[], const MKL_INT iy[]   ))', '_Mkl_Api(void,vsUnpackM,(const MKL_INT n,  const float  a[], float  y[], const MKL_INT my[]   ))']
ipps_lines=['IPPAPI(IppStatus, ippsCopy_32f,  (const Ipp32f*  pSrc, Ipp32f*  pDst, int len))', 'IPPAPI(IppStatus, ippsMove_32f,  (const Ipp32f*  pSrc, Ipp32f*  pDst, int len))', 'IPPAPI(IppStatus, ippsSet_32f,  (Ipp32f  val, Ipp32f*  pDst, int len))', 'IPPAPI(IppStatus, ippsZero_32f,  (Ipp32f*  pDst, int len))', 'IPPAPI(IppStatus, ippsTriangle_32f,  (Ipp32f*  pDst, int len, Ipp32f magn, Ipp32f rFreq, Ipp32f asym, Ipp32f* pPhase))', 'IPPAPI(IppStatus, ippsVectorJaehne_32f, (Ipp32f* pDst, int len, Ipp32f magn))', 'IPPAPI(IppStatus, ippsVectorSlope_32f, (Ipp32f* pDst, int len, Ipp32f offset, Ipp32f slope))', 'IPPAPI(IppStatus, ippsAddC_32f,       (const Ipp32f*  pSrc, Ipp32f  val, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsAdd_32f,       (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsAddProductC_32f, (const Ipp32f* pSrc, const Ipp32f val, Ipp32f* pSrcDst, int len))', 'IPPAPI(IppStatus, ippsAddProduct_32f,        (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, Ipp32f*  pSrcDst, int len))', 'IPPAPI(IppStatus, ippsMulC_32f,         (const Ipp32f*  pSrc, Ipp32f  val, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsMul_32f,       (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsSubC_32f,       (const Ipp32f*  pSrc, Ipp32f  val, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsSubCRev_32f,       (const Ipp32f*  pSrc, Ipp32f  val, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsSub_32f,       (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsDivC_32f,      (const Ipp32f*  pSrc, Ipp32f  val, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsDiv_32f,       (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsAbs_32f,   (const Ipp32f* pSrc, Ipp32f* pDst,    int len))', 'IPPAPI(IppStatus, ippsSqr_32f,       (const Ipp32f*  pSrc, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsSqrt_32f,       (const Ipp32f*  pSrc, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsExp_32f,      (const Ipp32f* pSrc, Ipp32f* pDst,    int len))', 'IPPAPI(IppStatus, ippsLn_32f,      (const Ipp32f* pSrc, Ipp32f* pDst,    int len))', 'IPPAPI(IppStatus, ippsSumLn_32f,    (const Ipp32f* pSrc, int len, Ipp32f* pSum))', 'IPPAPI(IppStatus, ippsArctan_32f,   (const Ipp32f* pSrc, Ipp32f* pDst,    int len))', 'IPPAPI(IppStatus, ippsNormalize_32f,      (const Ipp32f*  pSrc, Ipp32f* pDst,     int len, Ipp32f  vSub, Ipp32f vDiv))', 'IPPAPI(IppStatus, ippsMagnitude_32f,      (const Ipp32f*  pSrcRe, const Ipp32f* pSrcIm, Ipp32f* pDst, int len))', 'IPPAPI(IppStatus, ippsPhase_32f,     (const Ipp32f* pSrcRe, const Ipp32f* pSrcIm, Ipp32f* pDst, int len))', 'IPPAPI(IppStatus, ippsPowerSpectr_32f,    (const Ipp32f* pSrcRe, const Ipp32f* pSrcIm, Ipp32f* pDst, int len))', 'IPPAPI(IppStatus, ippsThreshold_LT_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len, Ipp32f level))', 'IPPAPI(IppStatus, ippsThreshold_GT_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len, Ipp32f level))', 'IPPAPI(IppStatus, ippsThreshold_LTAbs_32f,   (const Ipp32f* pSrc, Ipp32f *pDst, int len, Ipp32f level))', 'IPPAPI(IppStatus, ippsThreshold_GTAbs_32f,   (const Ipp32f* pSrc, Ipp32f *pDst, int len, Ipp32f level))', 'IPPAPI(IppStatus, ippsThreshold_LTAbsVal_32f,   (const Ipp32f* pSrc, Ipp32f *pDst, int len, Ipp32f level, Ipp32f value))', 'IPPAPI(IppStatus, ippsThreshold_LTVal_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len, Ipp32f level, Ipp32f  value))', 'IPPAPI(IppStatus, ippsThreshold_GTVal_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len, Ipp32f level, Ipp32f  value))', 'IPPAPI(IppStatus, ippsThreshold_LTValGTVal_32f,   (const Ipp32f* pSrc, Ipp32f* pDst, int len, Ipp32f levelLT, Ipp32f valueLT, Ipp32f levelGT, Ipp32f valueGT))', 'IPPAPI(IppStatus, ippsThreshold_LTInv_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len, Ipp32f level))', 'IPPAPI(IppStatus, ippsCartToPolar_32f,  (const Ipp32f* pSrcRe, const Ipp32f* pSrcIm, Ipp32f* pDstMagn, Ipp32f* pDstPhase, int len))', 'IPPAPI(IppStatus, ippsPolarToCart_32f,  (const Ipp32f* pSrcMagn, const Ipp32f* pSrcPhase, Ipp32f* pDstRe, Ipp32f* pDstIm, int len))', 'IPPAPI(IppStatus, ippsFlip_32f,    (const Ipp32f*  pSrc, Ipp32f*  pDst, int len))', 'IPPAPI(IppStatus, ippsWinBartlett_32f,   (const Ipp32f*  pSrc, Ipp32f* pDst,     int len))', 'IPPAPI(IppStatus, ippsWinHann_32f,   (const Ipp32f* pSrc,  Ipp32f* pDst,     int len))', 'IPPAPI(IppStatus, ippsWinHamming_32f,   (const Ipp32f* pSrc,  Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsWinBlackman_32f,    (const Ipp32f* pSrc,  Ipp32f*  pDst,    int len, Ipp32f alpha))', 'IPPAPI(IppStatus, ippsWinBlackmanStd_32f,   (const Ipp32f*  pSrc, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsWinBlackmanOpt_32f,   (const Ipp32f*  pSrc, Ipp32f*  pDst,    int len))', 'IPPAPI(IppStatus, ippsWinKaiser_32f,   (const Ipp32f*  pSrc, Ipp32f*  pDst,    int len, Ipp32f alpha))', 'IPPAPI(IppStatus, ippsSum_32f,         (const Ipp32f*  pSrc, int len, Ipp32f*  pSum, IppHintAlgorithm hint))', 'IPPAPI(IppStatus, ippsMin_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMin))', 'IPPAPI(IppStatus, ippsMax_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMax))', 'IPPAPI(IppStatus, ippsMinMax_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMin, Ipp32f* pMax))', 'IPPAPI(IppStatus, ippsMinAbs_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMinAbs))', 'IPPAPI(IppStatus, ippsMaxAbs_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMaxAbs))', 'IPPAPI(IppStatus, ippsMinIndx_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMin, int* pIndx))', 'IPPAPI(IppStatus, ippsMaxIndx_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMax, int* pIndx))', 'IPPAPI(IppStatus, ippsMinMaxIndx_32f, (const Ipp32f* pSrc, int len, Ipp32f* pMin, int* pMinIndx, Ipp32f* pMax, int* pMaxIndx))', 'IPPAPI(IppStatus, ippsMean_32f,     (const Ipp32f*  pSrc, int len, Ipp32f*  pMean, IppHintAlgorithm hint))', 'IPPAPI(IppStatus, ippsStdDev_32f,       (const Ipp32f* pSrc, int len, Ipp32f* pStdDev, IppHintAlgorithm hint))', 'IPPAPI(IppStatus, ippsMeanStdDev_32f,       (const Ipp32f* pSrc, int len, Ipp32f* pMean, Ipp32f* pStdDev, IppHintAlgorithm hint))', 'IPPAPI(IppStatus, ippsNorm_Inf_32f,         (const Ipp32f*  pSrc, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsNorm_L1_32f,          (const Ipp32f*  pSrc, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsNorm_L2_32f,          (const Ipp32f*  pSrc, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsNormDiff_Inf_32f,         (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsNormDiff_L1_32f,          (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsNormDiff_L2_32f,          (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, int len, Ipp32f* pNorm))', 'IPPAPI(IppStatus, ippsDotProd_32f,          (const Ipp32f*  pSrc1, const Ipp32f*  pSrc2, int len, Ipp32f*  pDp))', 'IPPAPI(IppStatus, ippsMinEvery_32f, (const Ipp32f* pSrc1, const Ipp32f* pSrc2, Ipp32f* pDst, Ipp32u len))', 'IPPAPI(IppStatus, ippsMaxEvery_32f, (const Ipp32f* pSrc1, const Ipp32f* pSrc2, Ipp32f* pDst, Ipp32u len))', 'IPPAPI(IppStatus, ippsMaxOrder_32f, (const Ipp32f* pSrc, int len, int* pOrder))', 'IPPAPI(IppStatus, ippsSampleUp_32f,  (const Ipp32f*  pSrc, int  srcLen, Ipp32f*  pDst, int* pDstLen, int factor, int* pPhase))', 'IPPAPI(IppStatus, ippsSampleDown_32f,  (const Ipp32f*  pSrc, int  srcLen, Ipp32f*  pDst, int* pDstLen, int factor, int* pPhase))', 'IPPAPI(IppStatus, ippsFilterMedian_32f,   (const Ipp32f* pSrc, Ipp32f* pDst,    int len, int maskSize, const Ipp32f *pDlySrc, Ipp32f *pDlyDst, Ipp8u *pBuffer))', 'IPPAPI( IppStatus, ippsFloor_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsCeil_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsTrunc_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsRound_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsRint_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsNearbyInt_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))', 'IPPAPI( IppStatus, ippsModf_32f, (const Ipp32f a[],Ipp32f r1[],Ipp32f r2[],Ipp32s n))', 'IPPAPI( IppStatus, ippsFrac_32f, (const Ipp32f a[],Ipp32f r[],Ipp32s n))']
rng_lines=['_Mkl_Api(int,vsRngCauchy,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngUniform,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngGaussian,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngGaussianMV,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const MKL_INT dimen,  const MKL_INT mstorage, const float *a,  const float *t ))', '_Mkl_Api(int,vsRngExponential,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngLaplace,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngWeibull,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b ,  const float c))', '_Mkl_Api(int,vsRngRayleigh,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngLognormal,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b ,  const float c,  const float d))', '_Mkl_Api(int,vsRngGumbel,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b  ))', '_Mkl_Api(int,vsRngGamma,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b ,  const float c))', '_Mkl_Api(int,vsRngBeta,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r,  const float a, const float b ,  const float c,  const float d))']
rngi_lines=['_Mkl_Api(int,viRngBernoulli,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double a))', '_Mkl_Api(int,viRngUniform,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const int a, const int b))', '_Mkl_Api(int,viRngGeometric,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double a))', '_Mkl_Api(int,viRngBinomial,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const int  , const double  ))', '_Mkl_Api(int,viRngMultinomial,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const int a, const int b, const double * c))', '_Mkl_Api(int,viRngHypergeometric,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const int a, const int b, const int c))', '_Mkl_Api(int,viRngNegbinomial,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double a, const double b))', '_Mkl_Api(int,viRngNegBinomial,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double a, const double b))', '_Mkl_Api(int,viRngPoisson,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double a ))', '_Mkl_Api(int,viRngPoissonV,(const MKL_INT method, VSLStreamStatePtr stream, const MKL_INT n, float * r, const double * a))']
