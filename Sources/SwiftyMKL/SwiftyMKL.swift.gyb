import Foundation
import CMKL
import CIPP

%{ import sys; sys.path.append('../..'); from funcs import * }%

public protocol Vector: BaseVector where Storage==ArrayStorage<Scalar>, Scalar:SupportsMKL { }

public struct VectorS<T:SupportsMKL>: Vector {
  public typealias Scalar=T
  public var data:ArrayStorage<T>
  public init(_ data_:ArrayStorage<T>) {data=data_}
}

extension Vector {
  public var p:MutPtrT {get {return data.p}}
  public var description: String { return "V\(Array(data).description)" }
  public init(_ data:Array<Scalar>) {self.init(ArrayStorage<Scalar>(data))}
  public init(_ count:Int) {self.init(ArrayStorage<Scalar>(count))}
  public var alignment:Int {return data.alignment}

  public func new(_ size:Int)  -> Self { return Self.init(ArrayStorage<Scalar>(size,  alignment:alignment)) }
  public func new()  -> Self { return new(data.count) }
  public func copy() -> Self { return Self.init(ArrayStorage<Scalar>(Array(data), alignment:alignment)) }

  func new_call(_ f:(Self)         ->()              )->Self { let res = new(); f(      res); return res }
  func new_call(_ f:(Self, Self)   ->(), _ b:Self    )->Self { let res = new(); f(b,    res); return res }
  func new_call<T>(_ f:(T, Self)   ->(), _ b:T       )->Self { let res = new(); f(b,    res); return res }
  func new_call<T>(_ f:(T, T, Self)->(), _ b:T, _ c:T)->Self { let res = new(); f(b, c, res); return res }

  func new_call<T>(_ f:(T, Self)->(), _ b:T, n:Int)->Self { let res = new(n); f(b, res); return res }
  func new_call<T>(_ f:(T, T, Self)->(), _ b:T, _ c:T, n:Int)->Self { let res = new(n); f(b, c, res); return res }

  public func asum()->Scalar { return Scalar.asum(c, p, 1) }
  public func nrm2()->Scalar { return Scalar.nrm2(c, p, 1) }
  public func dot(_ b:Self)->Scalar { return Scalar.dot(c, p, 1, b.p, 1) }
  public func set(_ b: Scalar) { Scalar.set(b, p, c) }
  public func zero() { Scalar.zero(p, c) }
  public func move(_ b:Self, _ n:Int) { Scalar.move(p, b.p, numericCast(n)) }
  public func move(_ b:Self, _ n:Int, fromIdx:Int, toIdx:Int) { _=Scalar.move(p+fromIdx, b.p+toIdx, numericCast(n)) }

  % for o in map(lower1,vml1):
  public func ${o}(_ dest: Self) { Scalar.${o}(c, p, dest.p) }
  public func ${o}_() { ${o}(self) }
  public func ${o}() -> Self  { return new_call(${o}) }
  % end # vml1

  % for o in map(lower1,vml2):
  public func ${o}(_ b:Self, _ dest:Self) { Scalar.${o}(c, p, b.p, dest.p) }
  public func ${o}_(_ b:Self) { ${o}(b, self) }
  public func ${o}(_ b:Self)->Self { return new_call(${o}, b) }
  % end # vml2

  % for o in map(lower1,ipp2):
  public func ${o}(_ b:Scalar, _ dest:Self) { Scalar.${o}(p, b, dest.p, c) }
  public func ${o}_(_ b:Scalar) { ${o}(b, self) }
  public func ${o}(_ b:Scalar)->Self { return new_call(${o}, b) }
  % end # ipp2

  // IPP convenience functions
  typealias ippFuncReduce = (PtrT,Int32,MutPtrT)->()
  func ipp_reduce(_ f:(MutPtrT)->())->Scalar { var res:Scalar=Scalar.init(); f(&res); return res }
  func ipp_reduce(_ f:ippFuncReduce)->Scalar { return ipp_reduce({f(p, c, $0)}) }

  % for o in map(lower1,ipp1):
  public func ${o}()->Scalar { return ipp_reduce(Scalar.${o}) }
  % end # ipp1

  % for o in map(lower1,ipp3):
  public func ${o}(_ b:Self)->Scalar {return ipp_reduce({Scalar.${o}(p, b.p, c, $0)})}
  % end # ipp3

  public func powx(_ b:Scalar, _ dest:Self) { Scalar.powx(c, p, b, dest.p) }
  public func powx_(_ b:Scalar) { powx(b, self) }
  public func powx(_ b:Scalar)->Self { return new_call(powx, b) }

  % for op,f in zip('+-*/', 'add sub mul div'.split()):
  public static func ${op}  (lhs:Self, rhs:Self  ) -> Self { return lhs.${f}( rhs) }
  public static func ${op}  (lhs:Self, rhs:Scalar) -> Self { return lhs.${f}C( rhs) }
  public static func ${op}= (lhs:Self, rhs:Self  )         { return lhs.${f}_(rhs) }
  public static func ${op}= (lhs:Self, rhs:Scalar)         { return lhs.${f}C_(rhs) }
  % end # op,f
  public static func + (lhs:Scalar, rhs:Self) -> Self { return rhs.addC(lhs) }
  public static func * (lhs:Scalar, rhs:Self) -> Self { return rhs.mulC(lhs) }

  public func packIncrement(_ incr:Int, _ from:Int, _ n:Int, _ dest:Self) { Scalar.packI(numericCast(n), p+from, numericCast(incr), dest.p) }
  public func packIncrement(_ incr:Int, _ from:Int, _ n:Int)->Self {
    let res = new(n); packIncrement(incr, from, n, res); return res
  }
  public func packIndices(_ idxs:[Int32], _ dest:Self) { Scalar.packV(numericCast(idxs.count), p, idxs, dest.p) }
  public func packIndices(_ idxs:[Int32])->Self { return new_call(packIndices, idxs, n:idxs.count) }
  public func packMasked(_ mask:[Int32], _ dest:Self) { Scalar.packM(c, p, mask, dest.p) }
  public func packMasked(_ mask:[Int32])->Self { return new_call(packMasked, mask, n:Int(mask.reduce(0,+))) }
}

